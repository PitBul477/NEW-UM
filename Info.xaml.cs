using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Imaging;

namespace NEW_UM
{
    public partial class Info : Window
    {
        public Info()
        {
            InitializeComponent();
        }

        private void ComboBox_Info(object sender, SelectionChangedEventArgs e)
        {
            switch (help.SelectedIndex)
            {
                case 0:
                    // Концепция программы
                    text.Text = $"Данная программа представляет собой упрощенную интернет версию телевизионной «Угадай мелодию». Программа содержит к себе ноты с мелодиями, при нажатии на которые воспроизводится музыкальный файл. Музыку воспроизводит само приложения, дополнительных плееров или программ в духе саундборда устанавливать не нужно.\r\nВ первом раунде счётчик с баллами у ноты уменьшается, а игрокам для заработка наибольшего количества баллов нужно как можно раньше нажать на кнопку для остановки мелодии и дать ответ.\r\nВо втором раунде принцип игры меняется: самих нот становится меньше, а счётчик баллов при проигрывании ноты увеличивается с 0 до определённого лимита. В зачёт идут баллы не за одну песню, а сразу за всю категорию.\r\nВ финал выходят два игрока, что набрали больше всех баллов по итогам игры. В финале заготовлена как минимум одна мелодия, в идеале – больше. И кто из финалистов угадает мелодию раньше – получает балл. Выигрывает тот, кто после проигрывания всех финалов заберёт себе больше баллов.\r\n";
                    image.Source = null; // логотип Угадай Мелодии
                    break;
                case 1:
                    // Обязательные компоненты
                    text.Text = $"Для работы программы необходимы:\r\n— файлы фонового изображения с названиями \"1 раунд.png\", \"2 раунд.png\" и \"Финал.png\", расположенные в папке \"images\" (примеры прикреплены в архиве);\r\n— текстовый файл \"Программа.txt\", находящийся в корневой папке.\r\n";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 2:
                    // Файл "Программа.txt"
                    text.Text = $"В файле \"Программа.txt\" должны быть расписаны раунды с рубриками и песни для финала в формате:\r\n1 РАУНД\r\n<Тема 1>\r\n<Тема 2>\r\n<Тема 3>\r\n...\r\n<Тема n>\r\n\r\n2 РАУНД\r\n<Тема 1>\r\n<Тема 2>\r\n<Тема 3>\r\n...\r\n<Тема n>\r\n\r\nФИНАЛ\r\n<Песня 1>\r\n<Песня 2>\r\n<Песня 3>\r\n...\r\n<Песня n>\r\n\r\nКоличество тем в раундах не ограничено, но в окно программы выведется не более 6. Можно создать и меньше. В финале может быть сколько угодно песен.\r\n";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 3:
                    // Структура папок и файлов
                    text.Text = $"В папке с текстовым файлом \"Программа.txt\" также должны быть папки \"1 РАУНД\" и \"2 РАУНД\". Внутри них нужно создать папки с темами, названные В ТОЧНОСТИ так, как записано в текстовом файле \"Программа.txt\".\r\nВ каждой папке с темой должны быть заготовлены аудиофайлы в формате .mp3 (другие форматы не поддерживаются) и именем, являющимся числом. Например: 1.mp3, 2.mp3 и т.д. Число в названии звукового файла соответствует ноте в программе. В первом раунде максимальное количество нот — 8, во втором — 5.\r\nЕсли в папке будет меньше песен, чем нот, то на пустую ноту лучше не нажимать — программа не проиграет мелодию, так как не сможет её найти.\r\nВАЖНО! В каждой теме первого раунда должен быть файл \"Баллы.txt\". ";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 4:
                    // Файл "Баллы.txt"
                    text.Text = $"Из \"Баллы.txt\" программа считывает информацию для таймера первого раунда. Для простоты работы лучше указывать номер, обозначающий ноту, имя композиции и баллы за песню. Главное — ставить в конце каждой строчки символ \"-\" и число после него (можно с пробелами).\r\nЧисло может быть от 1 до 99, но, если оно меньше 10, то указывайте значение с 0 в начале (например: 09, так как всегда считываются именно две цифры).\r\nНельзя пропускать строку или начинать файл с пустой строки. Первая строка соответствует первой ноте, вторая — второй и т.д. Пример файла: //расписать пример\r\nВо втором раунде файл \"Баллы.txt\" не нужен. Главное — соблюдать одинаковое наименование тем в папке и в файле \"Программа.txt\". Максимум — 6 тем по 5 песен в каждой.\r\n";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 5:
                    // Ответы у мелодий
                    text.Text = $"Программа может проиграть заранее заготовленный ответ, лежащий в папке \"Ответ\", которая, в свою очередь, должна быть создана в папке с названием темы. Песни в папке \"Ответ\" должны быть в таком же формате, как и в теме: n.mp3, где n — цифра от 1 до 8 с указанием на ноту.\r\nЖелательно заготовить для ответа самый яркий кусочек песни до 10 секунд с плавными возрастанием и затуханием мелодии. При желании от подготовки ответов можно отказаться.\r\n";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 6:
                    // Финальный раунд
                    text.Text = $"В финале действует принцип угадывания за выбранное количество секунд. Максимум — 20 секунд, минимум — 1 (рекомендуется ставить не меньше 3-х).\r\nОтвет должен быть записан текстовом файле \"Программа.txt\" на следующей строке после слова \"ФИНАЛ\". Записанное название будет выводиться после нажатия специальной клавиши в окне программы. Мелодия должна быть помещена там же, где и файл \"Программа.txt\" с именем \"final<n>.mp3\", где <n> — число, обозначающее порядковый номер песни в финале.\r\nЕсли в \"Программа.txt\" после слова \"ФИНАЛ\" будет записано несколько строк, то каждая строка будет считаться отдельной песней, а в окне финала появится стрелка перехода на следующую песню. Первой строчке будет соответствовать файл final1.mp3, второй final2.mp3 и т.д.\r\n";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 7:
                    // Дополнительная информация о финале
                    text.Text = $"НЕЛЬЗЯ, чтобы после слова \"ФИНАЛ\" была пустая строка или пропущенная строка — в таком случае имя песни не отобразится в окне. Если строчек в \"Программа.txt\" будет меньше, чем файлов final<n>.mp3 в корневой папке, то следующие песни не проиграются. Если же строчек будет больше, то программа перейдёт на следующую песню, но не сможет её проиграть (что логично, ведь её не будет).\r\nВАЖНО! Все раунды следует проигрывать последовательно: сначала 1 раунд, потом 2 раунд, потом финал. Если проиграть сначала 2 раунд, а потом вернуться на первый, то в окне будут отображены только кнопки для второго раунда. Программа не предусмотрена для возвращения назад, поэтому из финала совсем не вернуться. Сразу переходить к финалу также нельзя. Программа считывает файл \"Программа.txt\" ТОЛЬКО при выборе 1 или 2 раунда.\r\n";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 8:
                    // О настройках
                    text.Text = $"После подготовки основы программы можно перейти к настройкам, нажав на шестерёнку. Откроется новое окно, где можно настроить:\r\n— подключение к серверу ответов через интернет;\r\n— возможность изменять размер программы;\r\n— выбор интервалов счётчиков в раундах;\r\n— количество баллов за песню во втором раунде;\r\n— включение задержки ответа для второго раунда, когда ответы не принимаются, и настройку этой задержки в баллах;\r\n— выбор горячих клавиш;\r\n— информацию о программе.\r\nВсе настройки, кроме выбора горячих клавиш, применяются после нажатия на кнопку \"Применить\". Если вы передумали, то нажмите \"Отменить\" и окно закроется.\r\n";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 9:
                    // Изменение размера окна
                    text.Text = $"При включении галочки \"Изменить размер\" можно менять размер окна главной программы. Учтите, что могут появиться не закрашенные области. Чтобы отключить изменения размера, придётся зайти и нажать, а потом отжать галочку, и только после этого \"Применить\".";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 10:
                    // Интервалы раундов
                    text.Text = $"Интервалы первого раунда и второго измеряются в миллисекундах. 1 секунда = 1000 миллисекунд. Чем большее значение вы выставите, тем медленнее будет идти счётчик, и наоборот. Оптимальное значение для первого раунда — 1000 (1 балл за 1 секунду), для второго — 200 (5 баллов за 1 секунду).\r\nМожно выбрать свои значения и поэкспериментировать с таймингами программы, но не советую вводить больше 65000 — программа просто не будет работать.\r\n";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 11:
                    // Баллы за песню второго раунда
                    text.Text = $"Баллы за песню второго раунда — это максимальное число, после которого баллы начисляться больше не будут. Пункт с задержкой ответа работает только в связке с пунктом \"Интернет\". Опция означает, что проигрывание мелодии не останавливается раньше, чем набрано определённое количество баллов. Остановка мелодии с клавиатуры всё ещё возможна.";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 12:
                    // Горячие клавиши
                    text.Text = $"ВНИМАНИЕ! На разные действия нельзя назначать одни и те же клавиши. Можно сочетать клавиши с \"Shift\" и \"ctrl\" (программа различает правые и левые). Справа от кнопок выводится значение, которое сейчас стоит на выбранном действии. По нажатию на настройку нужного действия введите на клавиатуре ту кнопку, которую хотите назначить горячей клавишей, и она отобразится справа. Как только выбрали — нажмите на \"Применить\". Если нужно вернуть значение по-умолчанию — используйте отдельно заготовленную кнопку.\r\nP. S.: Значения по-умолчанию выставлены так, как удобно лично мне.\r\n";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 13:
                    // Интернет
                    text.Text = $"Галочку \"Интернет\" стоить прожимать только в том случае, если вы уверены, что поля с ip-адресом и портом введены верно и соответствуют серверу, на котором запущен обработчик ответов. Если всё правильно, то при нажатии на \"Применить\" программа скажет, что подключение успешно. После этого люди, у которых будет приложение с кнопкой (находится в архиве в папке \"Клиенты\" для windows и android), смогут останавливать проигрывание мелодии нажатием на кнопку \"Ответ\".\r\nВ windows можно нажимать как мышкой, так и клавишей \"Пробел\". Как только ответ придёт на сервер он отправит команду программе и она остановит песню, выводя в окне никнейм человека, который должен отвечать.\r\n";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 14:
                    // Серверная часть
                    text.Text = $"Если игра происходит по сети, то вам пригодится возможность принимать ответ с наименьшей задержкой. Для этого лучше использовать вспомогательную серверную программу с приложениями. По-умолчанию адрес установлен на мой личный сервер. Его включение для игры — отдельная платная услуга. Если хотите развернуть сервер у себя, то можете купить программу сервера (на Windows).";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 15:
                    // Клиенская часть
                    text.Text = $"Как использовать приложения ответа игрокам?\r\nВсё просто: запускаем, обязательно вводим имя или никнейм. Подтверждаем имя нажатием на \"ОК\". После этого достаточно нажать кнопку \"Ответить\", чтобы остановить проигрывание мелодии. На ПК также работает горячая клавиша пробела.\r\nЧтобы увидеть свою очерёдность ответа, на смартфоне достаточно нажать на глазик, а на ПК нужно зажать горячие клавиши \"Alt+P\".\r\n";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 16:
                    // Работа со своим сервером
                    text.Text = $"Если у вас развёрнут свой сервер, то потребуется поменять адрес. На смартфоне есть шестерёнка, при нажатии на которую открывается окно настроек. Вбиваем адрес, порт и применяем настройки. На Windows окно настроек нужно вызвать сочетанием клавиш \"Alt+N\", а после проделать те же действия.";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 17:
                    // Варианты клиенской части
                    text.Text = $"При установке приложения на ПК есть два варианта: скачать лёгкий клиент, который весит пару десятков килобайт, но скорее всего потребует установку .NET Desktop Runtime версии не ниже x86 v.6.0.16 — это библиотека Microsoft (если она не установлена, то при запуске программы система порекомендует перейти на сайт для скачивания). И есть тяжёлый клиент, который хранит эту библиотеку в себе, но весит более 130мб. Возможно потребуется подтверждение того, что ПО не вредоносное и вы доверяете разработчику.\r\nНа Android также нужно подтверждать установку стороннего apk-файла, перед этим каким-то образом поместив его на смартфон или любое другое устройство с системой Android.\r\n";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 18:
                    // Возможные баги в настройках
                    text.Text = $"1. Все \"галочки\" сбрасываются, если зайти в настройки ещё раз. Это можно исправить, но предполагается, что настройка происходит один раз перед игрой. Либо запоминайте положение \"галочек\", либо перезапускайте программу.\r\n\r\n2. После того, как была назначена горячая клавиша, кнопка не меняет цвет обратно. Я бы мог поменять цвет обратно руками, но тогда она в любом случае не перекрашивается при наведении.\r\n\r\n3. Если нажать \"Применить\", а потом \"Отменить\", то настройки уже будут применёнными.\r\n";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
                case 19:
                    // Дополнительная информация
                    text.Text = $"По всем вопросам обращайтесь в группу Telegram. Поддержать проект можно через Donation Alerts.";
                    image.Source = new BitmapImage(new Uri("/Resources/settings.png", UriKind.Relative)); // заглушка
                    break;
            }
        }
    }
}
